name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short

    - name: Test CLI installation
      run: |
        # Test that the CLI can be imported and shows version
        python -c "import improvctl; print('Import successful')"
        
    - name: Test CLI commands (smoke test)
      run: |
        # Create test .env file
        echo "IMPROVMX_API_KEY=sk_test_key_for_ci" > .env
        echo "DOMAIN=test.com" >> .env
        
        # Test version command (should work without API call)
        python -c "from cli import app; from typer.testing import CliRunner; runner = CliRunner(); result = runner.invoke(app, ['--version']); print('Version test:', 'PASS' if result.exit_code == 0 else 'FAIL')"

  package:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Test package installation
      run: |
        pip install dist/*.whl
        galias --version || echo "CLI test completed"
